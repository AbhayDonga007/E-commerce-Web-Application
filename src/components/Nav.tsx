/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/THge1lhuB9X
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

"use client"
import Link from "next/link";
import { SheetTrigger, SheetContent, Sheet } from "@/components/ui/sheet";
import { Input } from "@/components/ui/input";
import toast from "react-hot-toast";
import { SignedIn, SignedOut, SignInButton, UserButton, useSession } from "@clerk/nextjs";
import { ListboxWrapper } from "./ListboxWrapper";
import { loadStripe } from '@stripe/stripe-js';

import {
  Dropdown,
  DropdownItem,
  DropdownMenu,
  DropdownTrigger,
  Listbox,
  Navbar,
  NavbarContent,
  NavbarItem,
  ListboxItem,
  SelectItem,
  Select,
  Card,
  CardBody,
  Button,
  useDisclosure,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
  Image,
  CardFooter,
  CardHeader,
  Badge,
  ButtonGroup,
} from "@nextui-org/react";
import { LucideShoppingBag, ShoppingBagIcon } from "lucide-react";
import { useEffect, useState } from "react";
import axios from "axios";
import { CardTitle } from "./ui/card";
import Search from "./Search";

export interface Product {
  _id:string;
  name: string;
  des: string;
  type: string[];
  oriPrice: number;
  disPrice: number;
  size: string[];
  images: string;
}

export interface CartProduct {
  productId: Product;
  productQnt: number;
}
export interface Cart  {
  userId: string;
  products: CartProduct[];
}

export function Nav() {
  const [search, setSearch] = useState("");
  const [searchData, setSearchData] = useState([]);
  const {isOpen, onOpen, onOpenChange} = useDisclosure();

  const session = useSession();
  const userId = session.session?.user.id;
  
  
  const [list, setList] = useState<Cart>();

  useEffect(() => {
    // console.log(userId);
    const getCartData = async () => {
      const res = await axios.get(`/api/getCartData?userId=${userId}`);
      console.log(res.data);
      
      setList(res.data)
    }
    getCartData();

    const query = new URLSearchParams(window.location.search);
      if (query.get('success')) {
        console.log('Order placed! You will receive an email confirmation.');
      }
  
      if (query.get('canceled')) {
        console.log('Order canceled -- continue to shop around and checkout when youâ€™re ready.');
      }
  
  },[userId]);
  const MakePayment = async () => {
    const stripe = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY as string)
    console.log(list?.products);
    
    const body = {
      products : list?.products
    }
    const res = await fetch(`/api/payment`,{
      method:"POST",
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    })
    const session = await res.json()
    console.log(session);
    

    const result = stripe?.redirectToCheckout({sessionId:session.id})
  }
 
  const handleInc = async (productId:string) => {
    try {
      
      console.log(productId);
      
      const response = await axios.post('/api/cartIncrement', {productId,userId});
      // Update the state with the new quantity, assuming you have a state management in place
      // For example:
      // setCart(response.data.cart);
    } catch (error) {
      console.error("Error incrementing product quantity", error);
    }
  }
  const handleDec =async (productId:string) => {
      const response = await axios.post('/api/cartDecrement', {productId,userId});
  }

  const onSearch = async (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearch(e.target.value);

    if (search?.length > 2) {
      const res = await axios.get(`/api/getDataByName?name=${search}`);
      setSearchData(res.data);
    }
  };

  return (
    <Navbar isBordered>
      <nav className="hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6">
        <NavbarContent justify="start">
          <Link
            className="flex items-center gap-2 text-lg font-semibold md:text-base"
            href="#"
          >
            <Package2Icon className="h-6 w-6" />
            {/* <span className="sr-only">Acme Inc</span>/ */}
          </Link>
        </NavbarContent>
        <NavbarContent className="hidden sm:flex gap-5">
          <NavbarItem>
            <Link
              className="text-gray-500 transition-colors hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="/dashboard"
            >
              Dashboard
            </Link>
          </NavbarItem>
          <NavbarItem>
            <Link
              className="text-gray-500 transition-colors hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="#"
            >
              Orders
            </Link>
          </NavbarItem>
          <NavbarItem>
            <Link
              className="text-gray-500 transition-colors hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="/products"
            >
              Products
            </Link>
          </NavbarItem>
          <NavbarItem>
            <Link
              className="text-gray-500 transition-colors hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="#"
            >
              Customers
            </Link>
          </NavbarItem>
          <NavbarItem>
            <Link
              className="text-gray-950 transition-colors hover:text-gray-950 dark:text-gray-50 dark:hover:text-gray-50"
              href="#"
            >
              Settings
            </Link>
          </NavbarItem>
        </NavbarContent>
      </nav>
      <Sheet>
        <SheetTrigger asChild>
          <Button className="shrink-0 md:hidden">
            <MenuIcon className="h-5 w-5" />
            <span className="sr-only">Toggle navigation menu</span>
          </Button>
        </SheetTrigger>
        <SheetContent side="left">
          <nav className="grid gap-6 text-lg font-medium">
            <Link
              className="flex items-center gap-2 text-lg font-semibold"
              href="#"
            >
              <Package2Icon className="h-6 w-6" />
              <span className="sr-only">Acme Inc</span>
            </Link>
            <Link
              className="text-gray-500 hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="/dashboard"
            >
              Dashboard
            </Link>
            <Link
              className="text-gray-500 hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="#"
            >
              Orders
            </Link>
            <Link
              className="text-gray-500 hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="/products"
            >
              Products
            </Link>
            <Link
              className="text-gray-500 hover:text-gray-950 dark:text-gray-400 dark:hover:text-gray-50"
              href="#"
            >
              Customers
            </Link>
            <Link
              className="hover:text-gray-950 dark:hover:text-gray-50"
              href="#"
            >
              Settings
            </Link>
          </nav>
        </SheetContent>
      </Sheet>
      <NavbarContent as="div" className="items-center" justify="end">
        <div className="flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4">
          
          <Search />
            {/* <div className="">
            {searchData.length > 1 && (
              <Card className="">
                {searchData.map((item: Product) => (
                  <CardBody>
                    <p>{item.name}</p>
                  </CardBody>
                ))}
              </Card>
            )}
            </div> */}
          <span className="cart-icon">
            <Badge isInvisible={list?.products?.length ? false : true} content={list?.products?.length}  shape="circle" color="danger">
              <Button onPress={onOpen}  onPressStart={onOpen} isIconOnly className="bg-transparent" radius="full" size="md">
                <ShoppingBagIcon />
              </Button>
            </Badge>
            <Modal placement="top-center" backdrop="blur" scrollBehavior="inside" className="min-h-[500px] max-w-[800px]" isOpen={isOpen} onOpenChange={onOpenChange}>
              <ModalContent>
                {(onClose) => (
                  <>
                    <ModalHeader className="flex flex-col gap-1">Cart Items</ModalHeader>
                    <ModalBody>
                    <div className="gap-2 grid grid-cols-2 sm:grid-cols-4">
                      {list?.products?.map((item, index) => (
                        <Card shadow="sm" key={index} isPressable onPress={() => console.log("item pressed")}>
                          <CardHeader >
                            <CardTitle className="truncate text-nowrap text-sm capitalize">{item.productId.name}</CardTitle>
                          </CardHeader>
                          <CardBody className="overflow-visible p-0 m-0">
                            <Image
                              shadow="sm"
                              radius="lg"
                              width="100%"
                              alt={item.productId.name}
                              className="w-full max-h-[250px] object-cover"
                              src={item.productId.images}
                            />
                          </CardBody>
                          <div className="overflow-hidden text-small text-left text-balance mr-2 h-20 text-gray-500 ml-2 pt-1">{item.productId.des} $</div>
                          <CardFooter className="text-small truncate justify-between">
                            <ButtonGroup className="" size="sm">
                              <Button onClick={() => handleInc(item.productId._id)} className="font-bold bg-red-200" size="sm" isIconOnly radius="full">+</Button>
                              <div className="w-7 font-bold">{item.productQnt}</div>
                              <Button onClick={() => handleDec(item.productId._id)} className="font-bold bg-red-200" size="sm" isIconOnly radius="full">-</Button>
                            </ButtonGroup>
                            <div className="text-default-700 font-bold">{item.productQnt * item.productId.disPrice} $</div>
                          </CardFooter>
                        </Card>
                      ))}
                    </div>
                    </ModalBody>
                    <ModalFooter>
                      <Button onClick={MakePayment} className="" color="danger" variant="solid" onPress={onClose}>
                        Make Payment
                      </Button>
                    </ModalFooter>
                  </>
                )}
              </ModalContent>
            </Modal>
            
            {/* {Boolean(5) && <span>{5}</span>} */}
          </span>
          <div className="w-auto h-auto">
            <SignedOut>
              <SignInButton />
            </SignedOut>
            <SignedIn>
              <UserButton />
            </SignedIn>
          </div>
        </div>
      </NavbarContent>
    </Navbar>
  );
}

function CircleUserIcon({ ...props }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <circle cx="12" cy="10" r="3" />
      <path d="M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662" />
    </svg>
  );
}

function MenuIcon({ ...props }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  );
}

function Package2Icon({ ...props }) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" />
      <path d="m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" />
      <path d="M12 3v6" />
    </svg>
  );
}

